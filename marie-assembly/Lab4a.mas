/ MARIE Assembly Program - Polynomial Evaluator
/ This program evaluates the polynomial a * x^2 + b * x + c
/ Given a, b, c, and x as input, it computes and outputs the result.

Clear
Store XX        / XX = 0, will store x^2
Clear
Store AXX       / AXX = 0, will store a * x^2
Clear
Store BX        / BX = 0, will store b * x
Input           / Read coefficient a
Store A
Input           / Read coefficient b
Store B
Input           / Read constant c
Store C
Input
Store X         / Read value of x
Store X2        / Copy X into X2 for squaring

Clear
Store XX        / Reset XX = 0 before squaring

Load X2         / Start squaring X: XX = X * X
Skipcond 000
Jump nonnegX2   / If X >= 0, jump to loop

Subt X2
Subt X2
Store X2        / Convert X2 to positive
Clear
Add ONE
Store negflagX2
Clear
Jump loopX2

nonnegX2,   Clear
            Store negflagX2
            Load X2
            Skipcond 400
            Jump loopX2
            Jump AXXCalculation

loopX2, Load XX
        Add X
        Store XX

        Load X2
        Subt ONE
        Store X2

        Skipcond 400 
        Jump loopX2

Load negflagX2
Skipcond 800
Jump AXXCalculation

Load XX
Subt XX
Subt XX
Store XX

AXXCalculation, Load XX / Compute AXX = A * XX (i.e., a * x^2)
                Skipcond 000
                Jump nonnegAXX

                Subt XX
                Subt XX
                Store XX
                Clear
                Add ONE
                Store negflagAXX
                Clear
                Jump loopAXX

nonnegAXX,  Clear
            Store negflagAXX
            Load XX
            Skipcond 400
            Jump loopAXX
            Jump BXCalculation

loopAXX,    Load AXX
            Add A
            Store AXX

            Load XX
            Subt ONE
            Store XX

            Skipcond 400
            Jump loopAXX

Load negflagAXX
Skipcond 800
Jump BXCalculation

Load AXX
Subt AXX
Subt AXX
Store AXX

BXCalculation,  Load B  / Compute BX = B * X
                Skipcond 000
                Jump nonnegBX

                Subt B
                Subt B
                Store B
                Clear
                Add ONE
                Store negflagBX
                Clear
                Jump loopBX

nonnegBX,   Clear
            Store negflagBX
            Load B
            Skipcond 400
            Jump loopBX
            Jump halt 

loopBX, Load BX
        Add X
        Store BX

        Load B
        Subt ONE
        Store B

        Skipcond 400
        Jump loopBX

Load negflagBX
Skipcond 800
Jump halt

Load BX
Subt BX
Subt BX
Store BX

halt,   Load AXX        / Final calculation: AXX + BX + C
        Add BX
        Add C
        Output
        Halt

A,          DEC 0     / Coefficient a
B,          DEC 0     / Coefficient b
C,          DEC 0     / Constant c
X,          DEC 0     / Value of x
X2,         DEC 0     / Copy of x for squaring
ONE,        DEC 1     / Constant 1
negflagX2,  DEC 0     / Negative flag for X2
negflagAXX, DEC 0     / Negative flag for AXX
negflagBX,  DEC 0     / Negative flag for BX
XX,         DEC 0     / x^2
AXX,        DEC 0     / a * x^2
BX,         DEC 0     / b * x